;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit HeadPE : 
  module HeadPE : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip col_in : UInt<8>[4], col_out : UInt<8>, flip row_in : UInt<8>, row_out : UInt<8>, flip out_in : UInt<20>, out_out : UInt<20>, flip flow_index : UInt<2>, flip window_index : UInt<2>, flip out_index : UInt<1>, debug : UInt<20>[2]}
    
    reg row_ : UInt<8>, clock @[my_array.scala 24:17]
    reg col_ : UInt<8>, clock @[my_array.scala 25:17]
    io.row_out <= row_ @[my_array.scala 27:14]
    io.col_out <= col_ @[my_array.scala 28:14]
    reg out_0 : UInt<20>, clock @[my_array.scala 30:18]
    reg out_1 : UInt<20>, clock @[my_array.scala 31:18]
    node _T = eq(io.out_index, UInt<1>("h01")) @[my_array.scala 33:21]
    when _T : @[my_array.scala 33:30]
      io.out_out <= out_0 @[my_array.scala 34:16]
      skip @[my_array.scala 33:30]
    else : @[my_array.scala 35:15]
      io.out_out <= out_1 @[my_array.scala 36:16]
      skip @[my_array.scala 35:15]
    io.debug[0] <= out_0 @[my_array.scala 38:15]
    io.debug[1] <= out_1 @[my_array.scala 39:15]
    node _T_1 = eq(io.flow_index, UInt<1>("h00")) @[my_array.scala 41:22]
    when _T_1 : @[my_array.scala 41:31]
      row_ <= UInt<1>("h00") @[my_array.scala 42:11]
      col_ <= UInt<1>("h00") @[my_array.scala 43:11]
      out_0 <= UInt<1>("h00") @[my_array.scala 44:11]
      out_1 <= UInt<1>("h00") @[my_array.scala 45:11]
      skip @[my_array.scala 41:31]
    else : @[my_array.scala 46:37]
      node _T_2 = eq(io.flow_index, UInt<1>("h01")) @[my_array.scala 46:28]
      when _T_2 : @[my_array.scala 46:37]
        row_ <= io.row_in @[my_array.scala 47:10]
        col_ <= io.col_in[io.window_index] @[my_array.scala 48:10]
        node _T_3 = eq(io.out_index, UInt<1>("h00")) @[my_array.scala 50:23]
        when _T_3 : @[my_array.scala 50:32]
          node _out_0_T = mul(io.col_in[io.window_index], io.row_in) @[my_array.scala 51:43]
          node _out_0_T_1 = add(_out_0_T, out_0) @[my_array.scala 51:55]
          node _out_0_T_2 = tail(_out_0_T_1, 1) @[my_array.scala 51:55]
          out_0 <= _out_0_T_2 @[my_array.scala 51:13]
          out_1 <= io.out_in @[my_array.scala 52:13]
          skip @[my_array.scala 50:32]
        else : @[my_array.scala 53:17]
          node _out_1_T = mul(io.col_in[io.window_index], io.row_in) @[my_array.scala 54:43]
          node _out_1_T_1 = add(_out_1_T, out_1) @[my_array.scala 54:55]
          node _out_1_T_2 = tail(_out_1_T_1, 1) @[my_array.scala 54:55]
          out_1 <= _out_1_T_2 @[my_array.scala 54:13]
          out_0 <= io.out_in @[my_array.scala 55:13]
          skip @[my_array.scala 53:17]
        skip @[my_array.scala 46:37]
      else : @[my_array.scala 58:37]
        node _T_4 = eq(io.flow_index, UInt<2>("h02")) @[my_array.scala 58:28]
        when _T_4 : @[my_array.scala 58:37]
          row_ <= io.row_in @[my_array.scala 59:10]
          col_ <= io.col_in[io.window_index] @[my_array.scala 60:10]
          node _T_5 = eq(io.out_index, UInt<1>("h00")) @[my_array.scala 62:23]
          when _T_5 : @[my_array.scala 62:32]
            node _out_0_T_3 = mul(io.col_in[io.window_index], io.row_in) @[my_array.scala 63:43]
            node _out_0_T_4 = add(_out_0_T_3, out_0) @[my_array.scala 63:55]
            node _out_0_T_5 = tail(_out_0_T_4, 1) @[my_array.scala 63:55]
            out_0 <= _out_0_T_5 @[my_array.scala 63:13]
            out_1 <= out_1 @[my_array.scala 64:13]
            skip @[my_array.scala 62:32]
          else : @[my_array.scala 65:17]
            node _out_1_T_3 = mul(io.col_in[io.window_index], io.row_in) @[my_array.scala 66:43]
            node _out_1_T_4 = add(_out_1_T_3, out_1) @[my_array.scala 66:55]
            node _out_1_T_5 = tail(_out_1_T_4, 1) @[my_array.scala 66:55]
            out_1 <= _out_1_T_5 @[my_array.scala 66:13]
            out_0 <= out_0 @[my_array.scala 67:13]
            skip @[my_array.scala 65:17]
          skip @[my_array.scala 58:37]
    
