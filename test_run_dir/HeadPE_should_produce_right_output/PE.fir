;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit PE : 
  module PE : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip col_in : UInt<8>, col_out : UInt<8>, flip row_in : UInt<8>, row_out : UInt<8>, flip out_in : UInt<20>, out_out : UInt<20>, flip flow_index : UInt<2>, flip out_index : UInt<1>, debug : UInt<20>[2]}
    
    reg row_ : UInt<8>, clock @[my_array.scala 87:17]
    reg col_ : UInt<8>, clock @[my_array.scala 88:17]
    io.row_out <= row_ @[my_array.scala 90:14]
    io.col_out <= col_ @[my_array.scala 91:14]
    reg out_0 : UInt<20>, clock @[my_array.scala 93:18]
    reg out_1 : UInt<20>, clock @[my_array.scala 94:18]
    node _T = eq(io.out_index, UInt<1>("h01")) @[my_array.scala 96:21]
    when _T : @[my_array.scala 96:30]
      io.out_out <= out_0 @[my_array.scala 97:16]
      skip @[my_array.scala 96:30]
    else : @[my_array.scala 98:15]
      io.out_out <= out_1 @[my_array.scala 99:16]
      skip @[my_array.scala 98:15]
    io.debug[0] <= out_0 @[my_array.scala 101:15]
    io.debug[1] <= out_1 @[my_array.scala 102:15]
    node _T_1 = eq(io.flow_index, UInt<1>("h00")) @[my_array.scala 104:22]
    when _T_1 : @[my_array.scala 104:31]
      row_ <= UInt<1>("h00") @[my_array.scala 105:11]
      col_ <= UInt<1>("h00") @[my_array.scala 106:11]
      out_0 <= UInt<1>("h00") @[my_array.scala 107:11]
      out_1 <= UInt<1>("h00") @[my_array.scala 108:11]
      skip @[my_array.scala 104:31]
    else : @[my_array.scala 109:37]
      node _T_2 = eq(io.flow_index, UInt<1>("h01")) @[my_array.scala 109:28]
      when _T_2 : @[my_array.scala 109:37]
        row_ <= io.row_in @[my_array.scala 110:10]
        col_ <= io.col_in @[my_array.scala 111:10]
        node _T_3 = eq(io.out_index, UInt<1>("h00")) @[my_array.scala 113:23]
        when _T_3 : @[my_array.scala 113:32]
          node _out_0_T = mul(io.col_in, io.row_in) @[my_array.scala 114:26]
          node _out_0_T_1 = add(_out_0_T, out_0) @[my_array.scala 114:38]
          node _out_0_T_2 = tail(_out_0_T_1, 1) @[my_array.scala 114:38]
          out_0 <= _out_0_T_2 @[my_array.scala 114:13]
          out_1 <= io.out_in @[my_array.scala 115:13]
          skip @[my_array.scala 113:32]
        else : @[my_array.scala 116:17]
          node _out_1_T = mul(io.col_in, io.row_in) @[my_array.scala 117:26]
          node _out_1_T_1 = add(_out_1_T, out_1) @[my_array.scala 117:38]
          node _out_1_T_2 = tail(_out_1_T_1, 1) @[my_array.scala 117:38]
          out_1 <= _out_1_T_2 @[my_array.scala 117:13]
          out_0 <= io.out_in @[my_array.scala 118:13]
          skip @[my_array.scala 116:17]
        skip @[my_array.scala 109:37]
      else : @[my_array.scala 120:37]
        node _T_4 = eq(io.flow_index, UInt<2>("h02")) @[my_array.scala 120:28]
        when _T_4 : @[my_array.scala 120:37]
          row_ <= io.row_in @[my_array.scala 121:10]
          col_ <= io.col_in @[my_array.scala 122:10]
          node _T_5 = eq(io.out_index, UInt<1>("h00")) @[my_array.scala 124:23]
          when _T_5 : @[my_array.scala 124:32]
            node _out_0_T_3 = mul(io.col_in, io.row_in) @[my_array.scala 125:26]
            node _out_0_T_4 = add(_out_0_T_3, out_0) @[my_array.scala 125:38]
            node _out_0_T_5 = tail(_out_0_T_4, 1) @[my_array.scala 125:38]
            out_0 <= _out_0_T_5 @[my_array.scala 125:13]
            out_1 <= out_1 @[my_array.scala 126:13]
            skip @[my_array.scala 124:32]
          else : @[my_array.scala 127:17]
            node _out_1_T_3 = mul(io.col_in, io.row_in) @[my_array.scala 128:26]
            node _out_1_T_4 = add(_out_1_T_3, out_1) @[my_array.scala 128:38]
            node _out_1_T_5 = tail(_out_1_T_4, 1) @[my_array.scala 128:38]
            out_1 <= _out_1_T_5 @[my_array.scala 128:13]
            out_0 <= out_0 @[my_array.scala 129:13]
            skip @[my_array.scala 127:17]
          skip @[my_array.scala 120:37]
    
