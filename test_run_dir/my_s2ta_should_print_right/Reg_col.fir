;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Reg_col : 
  module Regs : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Regs_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip r_in : UInt<8>, flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>, c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>}
    
    reg reg1 : UInt<20>, clock @[custum_array.scala 93:17]
    reg reg2 : UInt<20>, clock @[custum_array.scala 94:17]
    io.r_out <= reg1 @[custum_array.scala 96:12]
    io.c1_out <= reg1 @[custum_array.scala 97:13]
    io.c2_out <= reg2 @[custum_array.scala 98:13]
    node _T = eq(io.c_state, UInt<3>("h00")) @[custum_array.scala 100:19]
    when _T : @[custum_array.scala 100:33]
      reg1 <= UInt<1>("h00") @[custum_array.scala 101:10]
      reg2 <= UInt<1>("h00") @[custum_array.scala 102:10]
      skip @[custum_array.scala 100:33]
    else : @[custum_array.scala 103:39]
      node _T_1 = eq(io.c_state, UInt<3>("h01")) @[custum_array.scala 103:25]
      when _T_1 : @[custum_array.scala 103:39]
        reg1 <= io.r_in @[custum_array.scala 104:10]
        reg2 <= io.c2_in @[custum_array.scala 105:10]
        skip @[custum_array.scala 103:39]
      else : @[custum_array.scala 106:39]
        node _T_2 = eq(io.c_state, UInt<3>("h02")) @[custum_array.scala 106:25]
        when _T_2 : @[custum_array.scala 106:39]
          reg1 <= io.c1_in @[custum_array.scala 107:10]
          reg2 <= io.c2_in @[custum_array.scala 108:10]
          skip @[custum_array.scala 106:39]
        else : @[custum_array.scala 109:39]
          node _T_3 = eq(io.c_state, UInt<3>("h03")) @[custum_array.scala 109:25]
          when _T_3 : @[custum_array.scala 109:39]
            reg2 <= reg1 @[custum_array.scala 110:10]
            reg1 <= reg1 @[custum_array.scala 111:10]
            skip @[custum_array.scala 109:39]
          else : @[custum_array.scala 112:15]
            reg1 <= reg1 @[custum_array.scala 113:10]
            reg2 <= reg2 @[custum_array.scala 114:10]
            skip @[custum_array.scala 112:15]
    node _T_4 = eq(io.d_state, UInt<2>("h02")) @[custum_array.scala 117:19]
    when _T_4 : @[custum_array.scala 117:33]
      io.debug <= reg1 @[custum_array.scala 118:14]
      skip @[custum_array.scala 117:33]
    else : @[custum_array.scala 119:39]
      node _T_5 = eq(io.d_state, UInt<2>("h03")) @[custum_array.scala 119:25]
      when _T_5 : @[custum_array.scala 119:39]
        io.debug <= reg2 @[custum_array.scala 120:14]
        skip @[custum_array.scala 119:39]
      else : @[custum_array.scala 121:15]
        io.debug <= UInt<1>("h00") @[custum_array.scala 122:14]
        skip @[custum_array.scala 121:15]
    
  module Reg_col : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip r_in : UInt<8>[16], flip c1_in : UInt<8>, flip c2_in : UInt<8>, r_out : UInt<8>[16], c1_out : UInt<8>, c2_out : UInt<8>, flip c_state : UInt<3>, flip d_state : UInt<2>, debug : UInt<32>[16]}
    
    inst regs_0 of Regs @[custum_array.scala 141:56]
    regs_0.clock <= clock
    regs_0.reset <= reset
    inst regs_1 of Regs_1 @[custum_array.scala 141:56]
    regs_1.clock <= clock
    regs_1.reset <= reset
    inst regs_2 of Regs_2 @[custum_array.scala 141:56]
    regs_2.clock <= clock
    regs_2.reset <= reset
    inst regs_3 of Regs_3 @[custum_array.scala 141:56]
    regs_3.clock <= clock
    regs_3.reset <= reset
    inst regs_4 of Regs_4 @[custum_array.scala 141:56]
    regs_4.clock <= clock
    regs_4.reset <= reset
    inst regs_5 of Regs_5 @[custum_array.scala 141:56]
    regs_5.clock <= clock
    regs_5.reset <= reset
    inst regs_6 of Regs_6 @[custum_array.scala 141:56]
    regs_6.clock <= clock
    regs_6.reset <= reset
    inst regs_7 of Regs_7 @[custum_array.scala 141:56]
    regs_7.clock <= clock
    regs_7.reset <= reset
    inst regs_8 of Regs_8 @[custum_array.scala 141:56]
    regs_8.clock <= clock
    regs_8.reset <= reset
    inst regs_9 of Regs_9 @[custum_array.scala 141:56]
    regs_9.clock <= clock
    regs_9.reset <= reset
    inst regs_10 of Regs_10 @[custum_array.scala 141:56]
    regs_10.clock <= clock
    regs_10.reset <= reset
    inst regs_11 of Regs_11 @[custum_array.scala 141:56]
    regs_11.clock <= clock
    regs_11.reset <= reset
    inst regs_12 of Regs_12 @[custum_array.scala 141:56]
    regs_12.clock <= clock
    regs_12.reset <= reset
    inst regs_13 of Regs_13 @[custum_array.scala 141:56]
    regs_13.clock <= clock
    regs_13.reset <= reset
    inst regs_14 of Regs_14 @[custum_array.scala 141:56]
    regs_14.clock <= clock
    regs_14.reset <= reset
    inst regs_15 of Regs_15 @[custum_array.scala 141:56]
    regs_15.clock <= clock
    regs_15.reset <= reset
    regs_0.io.r_in <= io.r_in[0] @[custum_array.scala 144:21]
    regs_0.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_0.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[0] <= regs_0.io.r_out @[custum_array.scala 148:17]
    io.debug[0] <= regs_0.io.debug @[custum_array.scala 149:17]
    regs_0.io.c1_in <= io.c1_in @[custum_array.scala 156:24]
    regs_0.io.c2_in <= io.c2_in @[custum_array.scala 157:24]
    io.c1_out <= regs_15.io.c1_out @[custum_array.scala 158:17]
    io.c2_out <= regs_15.io.c2_out @[custum_array.scala 159:17]
    regs_1.io.r_in <= io.r_in[1] @[custum_array.scala 144:21]
    regs_1.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_1.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[1] <= regs_1.io.r_out @[custum_array.scala 148:17]
    io.debug[1] <= regs_1.io.debug @[custum_array.scala 149:17]
    regs_1.io.c1_in <= regs_0.io.c1_out @[custum_array.scala 152:24]
    regs_1.io.c2_in <= regs_0.io.c2_out @[custum_array.scala 153:24]
    regs_2.io.r_in <= io.r_in[2] @[custum_array.scala 144:21]
    regs_2.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_2.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[2] <= regs_2.io.r_out @[custum_array.scala 148:17]
    io.debug[2] <= regs_2.io.debug @[custum_array.scala 149:17]
    regs_2.io.c1_in <= regs_1.io.c1_out @[custum_array.scala 152:24]
    regs_2.io.c2_in <= regs_1.io.c2_out @[custum_array.scala 153:24]
    regs_3.io.r_in <= io.r_in[3] @[custum_array.scala 144:21]
    regs_3.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_3.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[3] <= regs_3.io.r_out @[custum_array.scala 148:17]
    io.debug[3] <= regs_3.io.debug @[custum_array.scala 149:17]
    regs_3.io.c1_in <= regs_2.io.c1_out @[custum_array.scala 152:24]
    regs_3.io.c2_in <= regs_2.io.c2_out @[custum_array.scala 153:24]
    regs_4.io.r_in <= io.r_in[4] @[custum_array.scala 144:21]
    regs_4.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_4.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[4] <= regs_4.io.r_out @[custum_array.scala 148:17]
    io.debug[4] <= regs_4.io.debug @[custum_array.scala 149:17]
    regs_4.io.c1_in <= regs_3.io.c1_out @[custum_array.scala 152:24]
    regs_4.io.c2_in <= regs_3.io.c2_out @[custum_array.scala 153:24]
    regs_5.io.r_in <= io.r_in[5] @[custum_array.scala 144:21]
    regs_5.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_5.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[5] <= regs_5.io.r_out @[custum_array.scala 148:17]
    io.debug[5] <= regs_5.io.debug @[custum_array.scala 149:17]
    regs_5.io.c1_in <= regs_4.io.c1_out @[custum_array.scala 152:24]
    regs_5.io.c2_in <= regs_4.io.c2_out @[custum_array.scala 153:24]
    regs_6.io.r_in <= io.r_in[6] @[custum_array.scala 144:21]
    regs_6.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_6.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[6] <= regs_6.io.r_out @[custum_array.scala 148:17]
    io.debug[6] <= regs_6.io.debug @[custum_array.scala 149:17]
    regs_6.io.c1_in <= regs_5.io.c1_out @[custum_array.scala 152:24]
    regs_6.io.c2_in <= regs_5.io.c2_out @[custum_array.scala 153:24]
    regs_7.io.r_in <= io.r_in[7] @[custum_array.scala 144:21]
    regs_7.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_7.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[7] <= regs_7.io.r_out @[custum_array.scala 148:17]
    io.debug[7] <= regs_7.io.debug @[custum_array.scala 149:17]
    regs_7.io.c1_in <= regs_6.io.c1_out @[custum_array.scala 152:24]
    regs_7.io.c2_in <= regs_6.io.c2_out @[custum_array.scala 153:24]
    regs_8.io.r_in <= io.r_in[8] @[custum_array.scala 144:21]
    regs_8.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_8.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[8] <= regs_8.io.r_out @[custum_array.scala 148:17]
    io.debug[8] <= regs_8.io.debug @[custum_array.scala 149:17]
    regs_8.io.c1_in <= regs_7.io.c1_out @[custum_array.scala 152:24]
    regs_8.io.c2_in <= regs_7.io.c2_out @[custum_array.scala 153:24]
    regs_9.io.r_in <= io.r_in[9] @[custum_array.scala 144:21]
    regs_9.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_9.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[9] <= regs_9.io.r_out @[custum_array.scala 148:17]
    io.debug[9] <= regs_9.io.debug @[custum_array.scala 149:17]
    regs_9.io.c1_in <= regs_8.io.c1_out @[custum_array.scala 152:24]
    regs_9.io.c2_in <= regs_8.io.c2_out @[custum_array.scala 153:24]
    regs_10.io.r_in <= io.r_in[10] @[custum_array.scala 144:21]
    regs_10.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_10.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[10] <= regs_10.io.r_out @[custum_array.scala 148:17]
    io.debug[10] <= regs_10.io.debug @[custum_array.scala 149:17]
    regs_10.io.c1_in <= regs_9.io.c1_out @[custum_array.scala 152:24]
    regs_10.io.c2_in <= regs_9.io.c2_out @[custum_array.scala 153:24]
    regs_11.io.r_in <= io.r_in[11] @[custum_array.scala 144:21]
    regs_11.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_11.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[11] <= regs_11.io.r_out @[custum_array.scala 148:17]
    io.debug[11] <= regs_11.io.debug @[custum_array.scala 149:17]
    regs_11.io.c1_in <= regs_10.io.c1_out @[custum_array.scala 152:24]
    regs_11.io.c2_in <= regs_10.io.c2_out @[custum_array.scala 153:24]
    regs_12.io.r_in <= io.r_in[12] @[custum_array.scala 144:21]
    regs_12.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_12.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[12] <= regs_12.io.r_out @[custum_array.scala 148:17]
    io.debug[12] <= regs_12.io.debug @[custum_array.scala 149:17]
    regs_12.io.c1_in <= regs_11.io.c1_out @[custum_array.scala 152:24]
    regs_12.io.c2_in <= regs_11.io.c2_out @[custum_array.scala 153:24]
    regs_13.io.r_in <= io.r_in[13] @[custum_array.scala 144:21]
    regs_13.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_13.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[13] <= regs_13.io.r_out @[custum_array.scala 148:17]
    io.debug[13] <= regs_13.io.debug @[custum_array.scala 149:17]
    regs_13.io.c1_in <= regs_12.io.c1_out @[custum_array.scala 152:24]
    regs_13.io.c2_in <= regs_12.io.c2_out @[custum_array.scala 153:24]
    regs_14.io.r_in <= io.r_in[14] @[custum_array.scala 144:21]
    regs_14.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_14.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[14] <= regs_14.io.r_out @[custum_array.scala 148:17]
    io.debug[14] <= regs_14.io.debug @[custum_array.scala 149:17]
    regs_14.io.c1_in <= regs_13.io.c1_out @[custum_array.scala 152:24]
    regs_14.io.c2_in <= regs_13.io.c2_out @[custum_array.scala 153:24]
    regs_15.io.r_in <= io.r_in[15] @[custum_array.scala 144:21]
    regs_15.io.c_state <= io.c_state @[custum_array.scala 145:24]
    regs_15.io.d_state <= io.d_state @[custum_array.scala 146:24]
    io.r_out[15] <= regs_15.io.r_out @[custum_array.scala 148:17]
    io.debug[15] <= regs_15.io.debug @[custum_array.scala 149:17]
    regs_15.io.c1_in <= regs_14.io.c1_out @[custum_array.scala 152:24]
    regs_15.io.c2_in <= regs_14.io.c2_out @[custum_array.scala 153:24]
    
