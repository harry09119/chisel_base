;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Dense_PE_Array_sum_check : 
  module DensePE_sum_check : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module DensePE_sum_check_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip l_in : UInt<4>, flip t_in : UInt<4>, r_out : UInt<4>, b_out : UInt<4>, flip s_in : UInt<11>, s_out : UInt<11>, flip c_state : UInt<2>, debug_PE_key : UInt<4>, debug_PE_query : UInt<4>, debug_PE_score : UInt<11>}
    
    reg v_reg : UInt<4>, clock @[sum_check.scala 25:18]
    reg h_reg : UInt<4>, clock @[sum_check.scala 26:18]
    reg s_reg : UInt<11>, clock @[sum_check.scala 28:18]
    io.b_out <= v_reg @[sum_check.scala 30:12]
    io.r_out <= h_reg @[sum_check.scala 31:12]
    io.s_out <= s_reg @[sum_check.scala 32:12]
    io.debug_PE_key <= v_reg @[sum_check.scala 34:19]
    io.debug_PE_query <= h_reg @[sum_check.scala 35:21]
    io.debug_PE_score <= s_reg @[sum_check.scala 36:21]
    node _T = eq(UInt<2>("h00"), io.c_state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      v_reg <= v_reg @[sum_check.scala 40:13]
      h_reg <= h_reg @[sum_check.scala 41:13]
      s_reg <= s_reg @[sum_check.scala 42:13]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), io.c_state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        v_reg <= UInt<1>("h00") @[sum_check.scala 45:13]
        h_reg <= UInt<1>("h00") @[sum_check.scala 46:13]
        s_reg <= UInt<1>("h00") @[sum_check.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.c_state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          v_reg <= io.t_in @[sum_check.scala 50:13]
          h_reg <= io.l_in @[sum_check.scala 51:13]
          node _s_reg_T = mul(v_reg, h_reg) @[sum_check.scala 52:30]
          node _s_reg_T_1 = add(s_reg, _s_reg_T) @[sum_check.scala 52:22]
          node _s_reg_T_2 = tail(_s_reg_T_1, 1) @[sum_check.scala 52:22]
          s_reg <= _s_reg_T_2 @[sum_check.scala 52:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.c_state) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            s_reg <= io.s_in @[sum_check.scala 55:13]
            v_reg <= v_reg @[sum_check.scala 56:13]
            h_reg <= h_reg @[sum_check.scala 57:13]
            skip @[Conditional.scala 39:67]
    
  module Dense_PE_Array_sum_check : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip l_in : UInt<4>[4], flip t_in : UInt<4>[7], s_out : UInt<11>[4], flip c_pestate : UInt<2>, flip c_astate : UInt<2>, debug_pearray_key : UInt<4>[4][4], debug_pearray_query : UInt<4>[4][4], debug_pearray_score : UInt<11>[4][4]}
    
    inst pes_0_0 of DensePE_sum_check @[sum_check.scala 94:50]
    pes_0_0.clock <= clock
    pes_0_0.reset <= reset
    inst pes_0_1 of DensePE_sum_check_1 @[sum_check.scala 94:50]
    pes_0_1.clock <= clock
    pes_0_1.reset <= reset
    inst pes_0_2 of DensePE_sum_check_2 @[sum_check.scala 94:50]
    pes_0_2.clock <= clock
    pes_0_2.reset <= reset
    inst pes_0_3 of DensePE_sum_check_3 @[sum_check.scala 94:50]
    pes_0_3.clock <= clock
    pes_0_3.reset <= reset
    inst pes_1_0 of DensePE_sum_check_4 @[sum_check.scala 94:50]
    pes_1_0.clock <= clock
    pes_1_0.reset <= reset
    inst pes_1_1 of DensePE_sum_check_5 @[sum_check.scala 94:50]
    pes_1_1.clock <= clock
    pes_1_1.reset <= reset
    inst pes_1_2 of DensePE_sum_check_6 @[sum_check.scala 94:50]
    pes_1_2.clock <= clock
    pes_1_2.reset <= reset
    inst pes_1_3 of DensePE_sum_check_7 @[sum_check.scala 94:50]
    pes_1_3.clock <= clock
    pes_1_3.reset <= reset
    inst pes_2_0 of DensePE_sum_check_8 @[sum_check.scala 94:50]
    pes_2_0.clock <= clock
    pes_2_0.reset <= reset
    inst pes_2_1 of DensePE_sum_check_9 @[sum_check.scala 94:50]
    pes_2_1.clock <= clock
    pes_2_1.reset <= reset
    inst pes_2_2 of DensePE_sum_check_10 @[sum_check.scala 94:50]
    pes_2_2.clock <= clock
    pes_2_2.reset <= reset
    inst pes_2_3 of DensePE_sum_check_11 @[sum_check.scala 94:50]
    pes_2_3.clock <= clock
    pes_2_3.reset <= reset
    inst pes_3_0 of DensePE_sum_check_12 @[sum_check.scala 94:50]
    pes_3_0.clock <= clock
    pes_3_0.reset <= reset
    inst pes_3_1 of DensePE_sum_check_13 @[sum_check.scala 94:50]
    pes_3_1.clock <= clock
    pes_3_1.reset <= reset
    inst pes_3_2 of DensePE_sum_check_14 @[sum_check.scala 94:50]
    pes_3_2.clock <= clock
    pes_3_2.reset <= reset
    inst pes_3_3 of DensePE_sum_check_15 @[sum_check.scala 94:50]
    pes_3_3.clock <= clock
    pes_3_3.reset <= reset
    pes_0_0.io.l_in <= io.l_in[0] @[sum_check.scala 104:23]
    pes_0_0.io.s_in <= UInt<1>("h00") @[sum_check.scala 105:23]
    pes_1_0.io.l_in <= io.l_in[1] @[sum_check.scala 104:23]
    pes_1_0.io.s_in <= UInt<1>("h00") @[sum_check.scala 105:23]
    pes_2_0.io.l_in <= io.l_in[2] @[sum_check.scala 104:23]
    pes_2_0.io.s_in <= UInt<1>("h00") @[sum_check.scala 105:23]
    pes_3_0.io.l_in <= io.l_in[3] @[sum_check.scala 104:23]
    pes_3_0.io.s_in <= UInt<1>("h00") @[sum_check.scala 105:23]
    pes_0_0.io.t_in <= io.t_in[0] @[sum_check.scala 109:23]
    pes_0_1.io.t_in <= io.t_in[1] @[sum_check.scala 109:23]
    pes_0_2.io.t_in <= io.t_in[2] @[sum_check.scala 109:23]
    pes_0_3.io.t_in <= io.t_in[3] @[sum_check.scala 109:23]
    pes_1_0.io.t_in <= io.t_in[4] @[sum_check.scala 117:23]
    pes_2_0.io.t_in <= io.t_in[5] @[sum_check.scala 117:23]
    pes_3_0.io.t_in <= io.t_in[6] @[sum_check.scala 117:23]
    pes_0_1.io.l_in <= pes_0_0.io.r_out @[sum_check.scala 123:25]
    pes_0_1.io.s_in <= pes_0_0.io.s_out @[sum_check.scala 124:25]
    pes_0_2.io.l_in <= pes_0_1.io.r_out @[sum_check.scala 123:25]
    pes_0_2.io.s_in <= pes_0_1.io.s_out @[sum_check.scala 124:25]
    pes_0_3.io.l_in <= pes_0_2.io.r_out @[sum_check.scala 123:25]
    pes_0_3.io.s_in <= pes_0_2.io.s_out @[sum_check.scala 124:25]
    pes_1_1.io.l_in <= pes_1_0.io.r_out @[sum_check.scala 123:25]
    pes_1_1.io.s_in <= pes_1_0.io.s_out @[sum_check.scala 124:25]
    pes_1_2.io.l_in <= pes_1_1.io.r_out @[sum_check.scala 123:25]
    pes_1_2.io.s_in <= pes_1_1.io.s_out @[sum_check.scala 124:25]
    pes_1_3.io.l_in <= pes_1_2.io.r_out @[sum_check.scala 123:25]
    pes_1_3.io.s_in <= pes_1_2.io.s_out @[sum_check.scala 124:25]
    pes_2_1.io.l_in <= pes_2_0.io.r_out @[sum_check.scala 123:25]
    pes_2_1.io.s_in <= pes_2_0.io.s_out @[sum_check.scala 124:25]
    pes_2_2.io.l_in <= pes_2_1.io.r_out @[sum_check.scala 123:25]
    pes_2_2.io.s_in <= pes_2_1.io.s_out @[sum_check.scala 124:25]
    pes_2_3.io.l_in <= pes_2_2.io.r_out @[sum_check.scala 123:25]
    pes_2_3.io.s_in <= pes_2_2.io.s_out @[sum_check.scala 124:25]
    pes_3_1.io.l_in <= pes_3_0.io.r_out @[sum_check.scala 123:25]
    pes_3_1.io.s_in <= pes_3_0.io.s_out @[sum_check.scala 124:25]
    pes_3_2.io.l_in <= pes_3_1.io.r_out @[sum_check.scala 123:25]
    pes_3_2.io.s_in <= pes_3_1.io.s_out @[sum_check.scala 124:25]
    pes_3_3.io.l_in <= pes_3_2.io.r_out @[sum_check.scala 123:25]
    pes_3_3.io.s_in <= pes_3_2.io.s_out @[sum_check.scala 124:25]
    pes_1_1.io.t_in <= pes_0_0.io.b_out @[sum_check.scala 131:27]
    pes_1_2.io.t_in <= pes_0_1.io.b_out @[sum_check.scala 131:27]
    pes_1_3.io.t_in <= pes_0_2.io.b_out @[sum_check.scala 131:27]
    pes_2_1.io.t_in <= pes_1_0.io.b_out @[sum_check.scala 131:27]
    pes_2_2.io.t_in <= pes_1_1.io.b_out @[sum_check.scala 131:27]
    pes_2_3.io.t_in <= pes_1_2.io.b_out @[sum_check.scala 131:27]
    pes_3_1.io.t_in <= pes_2_0.io.b_out @[sum_check.scala 131:27]
    pes_3_2.io.t_in <= pes_2_1.io.b_out @[sum_check.scala 131:27]
    pes_3_3.io.t_in <= pes_2_2.io.b_out @[sum_check.scala 131:27]
    pes_0_0.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[0][0] <= pes_0_0.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[0][0] <= pes_0_0.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[0][0] <= pes_0_0.io.debug_PE_score @[sum_check.scala 140:36]
    pes_0_1.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[0][1] <= pes_0_1.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[0][1] <= pes_0_1.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[0][1] <= pes_0_1.io.debug_PE_score @[sum_check.scala 140:36]
    pes_0_2.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[0][2] <= pes_0_2.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[0][2] <= pes_0_2.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[0][2] <= pes_0_2.io.debug_PE_score @[sum_check.scala 140:36]
    pes_0_3.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[0][3] <= pes_0_3.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[0][3] <= pes_0_3.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[0][3] <= pes_0_3.io.debug_PE_score @[sum_check.scala 140:36]
    pes_1_0.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[1][0] <= pes_1_0.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[1][0] <= pes_1_0.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[1][0] <= pes_1_0.io.debug_PE_score @[sum_check.scala 140:36]
    pes_1_1.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[1][1] <= pes_1_1.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[1][1] <= pes_1_1.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[1][1] <= pes_1_1.io.debug_PE_score @[sum_check.scala 140:36]
    pes_1_2.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[1][2] <= pes_1_2.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[1][2] <= pes_1_2.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[1][2] <= pes_1_2.io.debug_PE_score @[sum_check.scala 140:36]
    pes_1_3.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[1][3] <= pes_1_3.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[1][3] <= pes_1_3.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[1][3] <= pes_1_3.io.debug_PE_score @[sum_check.scala 140:36]
    pes_2_0.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[2][0] <= pes_2_0.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[2][0] <= pes_2_0.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[2][0] <= pes_2_0.io.debug_PE_score @[sum_check.scala 140:36]
    pes_2_1.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[2][1] <= pes_2_1.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[2][1] <= pes_2_1.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[2][1] <= pes_2_1.io.debug_PE_score @[sum_check.scala 140:36]
    pes_2_2.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[2][2] <= pes_2_2.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[2][2] <= pes_2_2.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[2][2] <= pes_2_2.io.debug_PE_score @[sum_check.scala 140:36]
    pes_2_3.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[2][3] <= pes_2_3.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[2][3] <= pes_2_3.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[2][3] <= pes_2_3.io.debug_PE_score @[sum_check.scala 140:36]
    pes_3_0.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[3][0] <= pes_3_0.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[3][0] <= pes_3_0.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[3][0] <= pes_3_0.io.debug_PE_score @[sum_check.scala 140:36]
    pes_3_1.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[3][1] <= pes_3_1.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[3][1] <= pes_3_1.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[3][1] <= pes_3_1.io.debug_PE_score @[sum_check.scala 140:36]
    pes_3_2.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[3][2] <= pes_3_2.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[3][2] <= pes_3_2.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[3][2] <= pes_3_2.io.debug_PE_score @[sum_check.scala 140:36]
    pes_3_3.io.c_state <= io.c_pestate @[sum_check.scala 137:28]
    io.debug_pearray_key[3][3] <= pes_3_3.io.debug_PE_key @[sum_check.scala 138:34]
    io.debug_pearray_query[3][3] <= pes_3_3.io.debug_PE_query @[sum_check.scala 139:36]
    io.debug_pearray_score[3][3] <= pes_3_3.io.debug_PE_score @[sum_check.scala 140:36]
    io.s_out[0] <= pes_0_3.io.s_out @[sum_check.scala 145:19]
    io.s_out[1] <= pes_1_3.io.s_out @[sum_check.scala 145:19]
    io.s_out[2] <= pes_2_3.io.s_out @[sum_check.scala 145:19]
    io.s_out[3] <= pes_3_3.io.s_out @[sum_check.scala 145:19]
    
